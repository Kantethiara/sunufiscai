import os
import warnings
import urllib3
from typing import List, Tuple, Optional

from dotenv import load_dotenv
from elasticsearch import Elasticsearch
from sentence_transformers import SentenceTransformer
from langchain.agents import Tool, initialize_agent, AgentType
from langchain.memory import ConversationBufferMemory
from langchain_groq import ChatGroq
from langchain_core.messages import SystemMessage

from langdetect import detect
from langdetect.lang_detect_exception import LangDetectException

# D√©sactivation des avertissements
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings("ignore")
load_dotenv()

class PremiumFiscalAssistant:
    def __init__(self):
        self.mots_cles_fiscaux = {
            "imp√¥t", "impot", "taxe", "r√©glementations", "tva", "TVA", "CFPNB", "etax","imposable", "imposition", "dgi", "dgid", "droit fiscal",
            "cfpnb", "PV", "pv", "PME", "quitus", "PCF", "fiscalit√©", "d√©claration", "TOEM",
            "CGU", "Patente", "r√©capitulatifs", "exon√©ration", "remboursement", 
            "trop per√ßu", "d√©lai", "quitus fiscal", "d√©lai de paiement", "quittance", 
            "r√©c√©piss√©", "revenus", "formalisation", "contribution", "taxation", 
            "cadastre", "redevance", "contribution fonci√®re", "taxe sur les v√©hicules", 
            "taxe sur les biens", "taxe sur les op√©rations", "taxe sur les produits", 
            "taxe sur les services", "droit d'enregistrement", "droits d'enregistrement", 
            "taxes d'enregistrement", "entreprise", "changement de statuts", 
            "taxes sur les salaires", "taxe sur les salaires", "taxe fonci√®re", 
            "taxe professionnelle", "NINEA", "direct", "indirect", "r√©ouverture",
            "taxe sur la valeur ajout√©e", "passeport", "taxe sur les boissons", 
            "r√©ductions", "immatriculation", "propri√©taire", "compte", "duplicata", 
            "IR", "IS", "patente", "douane", "r√©gime fiscal", "code g√©n√©ral des imp√¥ts", 
            "proc√©dure", "acte administratif", "exon√©rations", "obligation fiscale", 
            "p√©nalit√©", "penalite", "amende", "contr√¥le fiscal", "d√©marrage des activit√©s", 
            "homologation", "acte", "titre", "SIGTAS", "imposition", "bail", 
            "foncier b√¢ti", "foncier non b√¢ti", "TEOM", "v√©rification", "versement", 
            "tr√©sor", "TVA d√©ductible", "TVA collect√©e", "TVA non r√©cup√©rable", 
            "non-assujetti", "assujetti", "centre des imp√¥ts", "r√©gularisation", 
            "d√©ductibilit√©", "d√©claration mensuelle", "d√©claration annuelle", 
            "num√©ro fiscal", "avis d'imposition", "bordereau de paiement", "num√©ro IFU", 
            "COFI", "fiscale", "fiscaux", "fiscal", "DGID", "impotsetdomaines", "dgi", 
            "direction g√©n√©rale des imp√¥ts"
        }
        
        self.salutations = {"bonjour", "salut", "hello", "bonsoir", "coucou", "hi", "salam", "yo", "bjr", "allo", "good morning", "good afternoon"}
        self.salutations = {s.lower() for s in self.salutations}
        self.salutations = {s for s in self.salutations if len(s.split()) <= 3}
        
        self.es = self._init_elasticsearch()
        self.embedder = self._init_embedder()
        self.llm = self._init_llm()
        self.agent = self._init_agent()
        self.response_cache = {}
        self.last_query = None
    def _init_elasticsearch(self):
        """Initialise et retourne une connexion Elasticsearch s√©curis√©e"""
        try:
            # Configuration avec valeurs par d√©faut s√©curis√©es
            es = Elasticsearch(
                os.getenv(
                    "ELASTICSEARCH_URL", 
                    "https://my-elasticsearch-project-beb3d2.es.us-east-1.aws.elastic.cloud:443"
                ),
                api_key=os.getenv("ELASTIC_API_KEY"),
                verify_certs=True,
                ssl_show_warn=True,
                timeout=30,
                max_retries=2
)

            # V√©rification imm√©diate de la connexion
            if not es.ping():
                raise ConnectionError("√âchec de la connexion Elasticsearch")
            
            print("‚úÖ Connexion Elasticsearch √©tablie avec succ√®s")
            return es

        except Exception as e:
            error_msg = f"‚ùå Erreur d'initialisation Elasticsearch: {str(e)}"
            
            # Suggestions sp√©cifiques selon l'erreur
            if "SSL" in str(e):
                error_msg += "\nüí° Conseil: V√©rifiez votre certificat SSL ou utilisez verify_certs=False en d√©veloppement"
            elif "authentication" in str(e):
                error_msg += "\nüí° Conseil: V√©rifiez votre cl√© API dans .env"
            
            print(error_msg)
            return None

    def _init_embedder(self):
        """Chargement du mod√®le d'embedding"""
        return SentenceTransformer("dangvantuan/sentence-camembert-base")

    def _init_llm(self):
        """Configuration du LLM"""
        return ChatGroq(
            api_key=os.getenv("GROQ_API_KEY"),
            model_name="llama3-70b-8192",
            temperature=0.2,
            max_tokens=1500
        )

    def _get_contextual_results(self, query: str) -> Tuple[List[str], float]:
        """Recherche optimis√©e dans Elasticsearch"""
        try:
            res = self.es.search(
                index="fiscality",
                body={
                    "query": {
                        "bool": {
                            "must": [
                                {
                                    "multi_match": {
                                        "query": query,
                                        "fields": ["question^3", "reponse^2", "tags"],
                                        "type": "best_fields"
                                    }
                                }
                            ]
                        }
                    },
                    "size": 3
                }
            )

            hits = res.get('hits', {}).get('hits', [])
            if not hits:
                return [], 0

            best_score = hits[0]['_score']
            responses = [hit['_source']['reponse'] for hit in hits]
            
            print("\nüîç R√©sultats de recherche :")
            for i, hit in enumerate(hits[:3]):
                print(f"{i+1}. Score: {hit['_score']:.2f} | Question: {hit['_source']['question']}")
            
            return responses, best_score

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur recherche Elasticsearch: {e}")
            return [], 0

    def _gerer_salutation(self):
        """Gestion simplifi√©e des salutations"""
        return "üíº Bonjour ! Assistant fiscal s√©n√©galais √† votre service. Posez-moi vos questions sur les imp√¥ts et taxes."

    def _est_question_fiscale(self, query: str) -> bool:
        """Version am√©lior√©e pour mieux g√©rer les sigles et acronymes"""
        query_lower = query.lower()
        
        # V√©rification des salutations simples
        if any(salut in query_lower for salut in self.salutations if len(query_lower.split()) <= 3):
            return False
            
        # V√©rification des sigles (m√™me seuls)
        sigles = {mot for mot in self.mots_cles_fiscaux if mot.isupper() and len(mot) >= 3}
        if any(sigle in query_lower for sigle in (s.lower() for s in sigles)):
            return True
        
        # V√©rification standard des mots-cl√©s
        return any(mot.lower() in query_lower for mot in self.mots_cles_fiscaux)

    def _generer_reponse_fiscale(self, question: str) -> str:
        """G√©n√®re une r√©ponse fiscale via LLM avec des garde-fous"""
        prompt = f"""
        En tant qu'expert fiscal s√©n√©galais, r√©pondez STRICTEMENT en fran√ßais √† cette question:
        "{question}"

        R√®gles absolues:
        1. R√©pondez UNIQUEMENT si c'est une question fiscale
        2. Structure obligatoire:
           - üìå Contexte fiscal clair
           - üî¢ 3-5 points cl√©s maximum
           - üìö R√©f√©rence l√©gale exacte si disponible
           - üîó Lien vers DGID si pertinent
        3. Si vous n'√™tes pas s√ªr: "Consultez un conseiller fiscal ou  "Consultez: https://www.dgid.sn/procedures-fiscales/"
        4. NE PAS INVENTER de textes de loi
        5. Si la question commence par "C'est quoi", "Qu'est-ce que", "Que signifie", consid√©rez qu'il s'agit 
d'une demande de d√©finition fiscale. R√©pondez comme √† une question classique, en suivant la structure exig√©e.
        6. R√©pondez en fran√ßais uniquement, jamais en anglais, wolof ou autres langues.
        7. POUR LES QUESTIONS NON FISCALES:
   "‚õî Je ne traite que les questions fiscales et il NE FAUT jamais r√©pondre a une question non fiscal."
                """
        
        try:
            reponse = self.llm.invoke(prompt).content
            return self._valider_reponse_fiscale(reponse)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur LLM: {str(e)}")
            return ("‚ÑπÔ∏è Je rencontre des difficult√©s techniques. "
                    "Veuillez consulter directement: https://www.dgid.sn")

    def _valider_reponse_fiscale(self, reponse: str) -> str:
        """Valide que la r√©ponse reste dans le domaine fiscal"""
        if not isinstance(reponse, str) or not reponse.strip():
            return "‚õî R√©ponse vide ou invalide"

        if not self._est_question_fiscale(reponse):
            return ("‚õî Je ne peux r√©pondre qu'aux questions fiscales. "
                   )
                    
        return reponse

    def recherche_fiscale(self, query: str) -> str:
        """Version am√©lior√©e avec contr√¥le strict du domaine fiscal"""
        print(f"üéØ Appel √† recherche_fiscale avec : {query}")

        # √âtape 1 : V√©rification de la langue
        try:
            if detect(query) != "fr":
                return "‚õî Veuillez poser votre question en fran√ßais uniquement."
        except LangDetectException:
            return "‚ö†Ô∏è Impossible de d√©tecter la langue de votre question."

        # √âtape 2 : Filtrage des questions non fiscales
        if not self._est_question_fiscale(query):
            return (
                "‚õî Je suis strictement limit√© aux questions fiscales s√©n√©galaises. "
                "Domaines couverts: imp√¥ts, taxes, d√©clarations, code fiscal."
            )

        # √âtape 3 : Recherche dans la base de connaissances
        responses, score = self._get_contextual_results(query)
        
        # √âtape 4 : Gestion des r√©ponses
        if responses and score > 1.0:  # Seuil de pertinence
            return responses[0]
        else:
            # Fallback contr√¥l√© vers le LLM
            return ("‚ö†Ô∏è Information non trouv√©e dans nos bases. Voici une r√©ponse g√©n√©rale:\n\n"
                   f"{self._generer_reponse_fiscale(query)}\n\n"
                   "Pour confirmation: https://www.dgid.sn")

    def vider_cache(self):
        """Vide le cache des r√©ponses"""
        self.response_cache.clear()
        print("üóëÔ∏è Cache vid√© avec succ√®s !")

    def _init_agent(self):
        """Initialisation de l'agent avec contr√¥le strict"""
        fiscal_tool = Tool(
            name="BaseFiscalePremium",
            func=self.recherche_fiscale,
            description=(
                "üîç Outil STRICTEMENT limit√© √† la fiscalit√© s√©n√©galaise. "
                "R√©pond uniquement en fran√ßais. "
            
            )
        )

        return initialize_agent(
            tools=[fiscal_tool],
            llm=self.llm,
            agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
            memory=ConversationBufferMemory(
                memory_key="chat_history",
                return_messages=True,
                output_key='output'
            ),
            verbose=False,
            max_iterations=3,
            early_stopping_method="generate",
            handle_parsing_errors=True,  # <-- Ajout crucial
            agent_kwargs={
                "system_message": SystemMessage(content="""
üéì R√®gles absolues :
0. R√©pondez COMME UN EXPERT FISCAL SENEGALAIS qui parle uniquement fran√ßais
1. DOMAINE UNIQUE: Fiscalit√© s√©n√©galaise seulement
2. POUR LES QUESTIONS NON FISCALES:
   "‚õî Je ne traite que les questions fiscales."
3. STRUCTURE OBLIGATOIRE:
   - üìå Contexte fiscal clair
   - üî¢ 3-5 points maximum
   - üìö R√©f√©rence l√©gale exacte
   - üîó Lien DGID si pertinent
4. SI INFORMATION INCOMPL√àTE:
   "‚ö†Ô∏è Information non trouv√©e. Consultez www.dgid.sn"
5. LANGUE: Fran√ßais exclusivement JAMAIS
   - Anglais, Wolof, ou autres langues
   - Pas de jargon technique
6. NE PAS:
   - Inventer des textes de loi
   - Donner d'avis personnel
   - R√©pondre hors domaine fiscal
7. Si la question commence par "C'est quoi", "Qu'est-ce que", "Que signifie", consid√©rez qu'il s'agit 
d'une demande de d√©finition fiscale. R√©pondez comme √† une question classique, en suivant la structure exig√©e.
""")
            }
        )

    def run(self):
        print("\n" + "="*50)
        print("ASSISTANT FISCAL PREMIUM - S√âN√âGAL ".center(50))
        print("="*50)
        print(self._gerer_salutation())
        
        while True:
            try:
                user_input = input("\nVotre question fiscale : ").strip()
                
                # Commandes sp√©ciales
                if user_input.lower() in ['au revoir', 'merci', 'quit', 'q']:
                    print("\nMerci pour votre confiance. √Ä bient√¥t !")
                    break
                    
                if user_input.lower() in ['vider cache', 'reset']:
                    self.vider_cache()
                    print("Cache vid√© avec succ√®s !")
                    continue

                # Gestion des salutations
                if user_input.lower() in self.salutations:
                    print("\nüíº Bonjour ! Je suis votre assistant fiscal. Posez-moi vos questions sur :")
                    print("- Imp√¥ts (IR, IS, IFU)")
                    print("- Taxes (TVA, Patente)")
                    print("- D√©marches fiscales")
                    print("- Code g√©n√©ral des imp√¥ts")
                    continue

                # V√©rification du domaine fiscal
                if not self._est_question_fiscale(user_input):
                    print("\n‚õî D√©sol√©, je ne traite que les questions fiscales.")
                    print("Domaines accept√©s :")
                    print(", ".join(sorted(self.mots_cles_fiscaux)[:10]) + "...")
                    print("Exemple : 'Quelles sont les d√©marches pour un quitus fiscal ?'")
                    continue

                # Traitement de la question fiscale
                print("\nüîç Consultation de la base fiscale...")
                response = self.agent.invoke({"input": user_input})
                
                # V√©rification que la r√©ponse est bien fiscale
                if any(phrase in response['output'].lower() for phrase in ["hors domaine fiscal", "non fiscal"]):
                    print("\n‚ö†Ô∏è La r√©ponse semble hors domaine :")
                    print(response['output'])
                    print("\nVeuillez reformuler votre question en termes fiscaux.")
                else:
                    print("\nüìå R√©ponse :", response['output'])
                    
            except KeyboardInterrupt:
                print("\n\nMerci d'avoir utilis√© l'Assistant Fiscal Premium. Au revoir !")
                break
                
            except Exception as e:
                print(f"\n‚ö†Ô∏è Erreur technique : {str(e)}")
                print("Veuillez r√©essayer ou contacter le support.")
                self.vider_cache()

if __name__ == "__main__":
    assistant = PremiumFiscalAssistant()
    assistant.run()